"""
Composant pour les tooltips et informations contextuelles
"""
import streamlit as st
from utils.constants import POLLUTION_INFO, WEATHER_INFO, RISK_INFO

class TooltipComponent:
    
    @staticmethod
    def render_help_section():
        """Rendu de la section d'aide compl√®te"""
        
        st.markdown("### ‚ùì Guide d'utilisation")
        
        with st.expander("üîç Comment utiliser l'application"):
            st.markdown("""
            **√âtapes simples :**
            1. **Recherchez** un lieu dans la barre de recherche
            2. **S√©lectionnez** une suggestion dans la liste
            3. **Consultez** les donn√©es de risque sur la carte et le dashboard
            4. **Interpr√©tez** les r√©sultats gr√¢ce aux indicateurs color√©s
            
            **Fonctionnalit√©s :**
            - üîç **Recherche en temps r√©el** avec autocompl√©tion
            - üó∫Ô∏è **Carte interactive** avec marqueurs color√©s
            - üìä **Dashboard d√©taill√©** avec m√©triques et graphiques
            - üéØ **Indice de risque** combinant m√©t√©o et qualit√© de l'air
            """)
        
        with st.expander("üéØ Comprendre l'indice de risque"):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown("""
                **üü¢ FAIBLE (0.00-0.25)**
                - Conditions excellentes
                - Sortie recommand√©e
                - Aucune pr√©caution particuli√®re
                """)
            
            with col2:
                st.markdown("""
                **üü° MOD√âR√â (0.26-0.50)**
                - Conditions acceptables
                - Pr√©cautions pour personnes sensibles
                - R√©duire l'exposition prolong√©e
                """)
            
            with col3:
                st.markdown("""
                **üî¥ √âLEV√â (0.51-1.00)**
                - Conditions d√©favorables
                - √âviter les sorties prolong√©es
                - Masque recommand√©
                """)
        
        with st.expander("üí® Qualit√© de l'air - Polluants"):
            TooltipComponent._render_pollution_info()
        
        with st.expander("üå°Ô∏è Conditions m√©t√©orologiques"):
            TooltipComponent._render_weather_info()
        
        with st.expander("‚ö†Ô∏è Limitations et sources"):
            st.markdown("""
            **Limitations actuelles :**
            - Les API Mapbox fonctionnent principalement en Am√©rique du Nord et Europe
            - Les donn√©es OpenWeather sont mises √† jour toutes les ~2 heures
            - L'indice de risque est calcul√© selon notre algorithme propri√©taire
            
            **Sources de donn√©es :**
            - üó∫Ô∏è **G√©olocalisation** : Mapbox Search API
            - üå°Ô∏è **M√©t√©o** : OpenWeather API
            - üí® **Qualit√© de l'air** : OpenWeather Air Pollution API
            
            **Calcul de l'indice :**
            L'indice combine de mani√®re pond√©r√©e :
            - Concentration des polluants (PM2.5, PM10, O‚ÇÉ, NO‚ÇÇ, SO‚ÇÇ, CO)
            - Conditions m√©t√©orologiques (temp√©rature, humidit√©, vent)
            """)
    
    @staticmethod
    def _render_pollution_info():
        """Informations d√©taill√©es sur les polluants"""
        
        st.markdown("**Principaux polluants surveill√©s :**")
        
        for pollutant, info in POLLUTION_INFO.items():
            with st.container():
                st.markdown(f"**{pollutant}** - {info['name']}")
                st.write(f"‚Ä¢ {info['description']}")
                st.write(f"‚Ä¢ Seuil recommand√© : {info['threshold']} ¬µg/m¬≥")
                st.write(f"‚Ä¢ Sources : {info['sources']}")
                st.markdown("---")
    
    @staticmethod
    def _render_weather_info():
        """Informations sur les conditions m√©t√©orologiques"""
        
        st.markdown("**Facteurs m√©t√©orologiques pris en compte :**")
        
        for factor, info in WEATHER_INFO.items():
            st.markdown(f"**{info['name']}**")
            st.write(f"‚Ä¢ {info['description']}")
            st.write(f"‚Ä¢ Plage optimale : {info['optimal_range']}")
            st.markdown("---")
    
    @staticmethod
    def render_contextual_tooltip(tooltip_type, data=None):
        """Rendu de tooltip contextuel selon le type"""
        
        if tooltip_type == "risk_explanation":
            return TooltipComponent._risk_tooltip(data)
        elif tooltip_type == "pollutant_detail":
            return TooltipComponent._pollutant_tooltip(data)
        elif tooltip_type == "weather_impact":
            return TooltipComponent._weather_tooltip(data)
        else:
            return "‚ÑπÔ∏è Information non disponible"
    
    @staticmethod
    def _risk_tooltip(risk_data):
        """Tooltip pour l'explication du risque"""
        if not risk_data:
            return "Aucune donn√©e de risque disponible"
        
        risk_label = risk_data.get('risk_label', 'Unknown')
        risk_index = risk_data.get('risk_index', 0)
        
        explanation = RISK_INFO.get(risk_label.upper(), {})
        
        return f"""
        **Niveau de risque : {risk_label.upper()}**
        
        Indice calcul√© : {risk_index:.3f}
        
        {explanation.get('description', '')}
        
        **Recommandations :**
        {explanation.get('recommendations', 'Consultez un professionnel de sant√©')}
        """
    
    @staticmethod
    def _pollutant_tooltip(pollutant_data):
        """Tooltip d√©taill√© pour un polluant"""
        if not pollutant_data:
            return "Aucune donn√©e de polluant disponible"
        
        pollutant = pollutant_data.get('type', 'unknown')
        value = pollutant_data.get('value', 0)
        
        info = POLLUTION_INFO.get(pollutant, {})
        
        return f"""
        **{info.get('name', pollutant.upper())}**
        
        Concentration actuelle : {value:.1f} ¬µg/m¬≥
        Seuil recommand√© : {info.get('threshold', 'N/A')} ¬µg/m¬≥
        
        {info.get('description', '')}
        
        **Sources principales :**
        {info.get('sources', 'Non sp√©cifi√©')}
        """
    
    @staticmethod
    def _weather_tooltip(weather_data):
        """Tooltip pour l'impact m√©t√©orologique"""
        if not weather_data:
            return "Aucune donn√©e m√©t√©o disponible"
        
        temp = weather_data.get('temp_celsius', 0)
        humidity = weather_data.get('humidity', 0)
        wind_speed = weather_data.get('wind_speed', 0)
        
        return f"""
        **Impact des conditions m√©t√©orologiques**
        
        üå°Ô∏è **Temp√©rature** : {temp}¬∞C
        {TooltipComponent._get_temp_impact(temp)}
        
        üíß **Humidit√©** : {humidity}%
        {TooltipComponent._get_humidity_impact(humidity)}
        
        üí® **Vent** : {wind_speed} m/s
        {TooltipComponent._get_wind_impact(wind_speed)}
        """
    
    @staticmethod
    def _get_temp_impact(temp):
        """√âvalue l'impact de la temp√©rature"""
        if temp < 5:
            return "‚ùÑÔ∏è Tr√®s froid - Peut aggraver les probl√®mes respiratoires"
        elif temp < 15:
            return "ü•∂ Froid - Air sec, attention aux voies respiratoires"
        elif temp <= 25:
            return "üòä Temp√©rature confortable"
        elif temp <= 30:
            return "üå°Ô∏è Chaud - Peut augmenter la concentration de polluants"
        else:
            return "üî• Tr√®s chaud - Ozone √©lev√© possible, √©viter l'exposition"
    
    @staticmethod
    def _get_humidity_impact(humidity):
        """√âvalue l'impact de l'humidit√©"""
        if humidity < 30:
            return "üèúÔ∏è Air sec - Peut irriter les voies respiratoires"
        elif humidity <= 60:
            return "üòä Humidit√© confortable"
        else:
            return "üíß Air humide - Peut favoriser les allerg√®nes"
    
    @staticmethod
    def _get_wind_impact(wind_speed):
        """√âvalue l'impact du vent"""
        if wind_speed < 2:
            return "üå´Ô∏è Vent faible - Accumulation possible de polluants"
        elif wind_speed <= 6:
            return "üçÉ Vent mod√©r√© - Dispersion normale des polluants"
        else:
            return "üí® Vent fort - Bonne dispersion mais possibles particules en suspension"
    
    @staticmethod
    def render_sidebar_help():
        """Rendu de l'aide dans la sidebar"""
        
        with st.sidebar:
            st.markdown("### üÜò Aide rapide")
            
            with st.expander("üéØ Indice de risque"):
                st.markdown("""
                - üü¢ **0.00-0.25** : Faible
                - üü° **0.26-0.50** : Mod√©r√©  
                - üî¥ **0.51-1.00** : √âlev√©
                """)
            
            with st.expander("üí® Polluants cl√©s"):
                st.markdown("""
                - **PM2.5** : Particules fines
                - **PM10** : Particules en suspension
                - **O‚ÇÉ** : Ozone troposph√©rique
                - **NO‚ÇÇ** : Dioxyde d'azote
                """)
            
            st.markdown("---")
            st.markdown("**üåç Couverture** : US, Canada, Europe")
            st.markdown("**üïê Mise √† jour** : ~2 heures")
