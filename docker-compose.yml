services:
  frontend:
    build:
      context: ./frontend
    ports:
      - "8501:8501"
    environment:
      - BACKEND_URL=http://backend:8000
      - API_TIMEOUT=15
      - DEVELOPMENT_MODE=false
      - USE_MOCK_API=false
    volumes:
      - ./frontend/static:/app/static:ro
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - respiratory-network

  backend:
    build:
      context: ./backend
    image: respiratory-risk-backend:latest
    ports:
      - "8000:8000"
    environment:
      - MAPBOX_TOKEN=${MAPBOX_TOKEN}
      - OPENWEATHER_KEY=${OPENWEATHER_KEY}
      - DATABASE_URL=postgresql+asyncpg://postgres:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - CACHE_HOST=redis
      - CACHE_PORT=6379
      - CACHE_PASSWORD=${CACHE_PASSWORD}
      - CACHE_TTL_SECONDS=3600
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - respiratory-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - respiratory-network

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${CACHE_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - respiratory-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - respiratory-network

volumes:
  postgres_data:
  redis_data:

networks:
  respiratory-network:
    driver: bridge