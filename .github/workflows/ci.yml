name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: safeair_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5

    env:
      POETRY_VIRTUALENVS_IN_PROJECT: "true"
      POETRY_NO_INTERACTION: "true"
      MAPBOX_TOKEN: ${{ secrets.MAPBOX_TOKEN }}
      OPENWEATHER_KEY: ${{ secrets.OPENWEATHER_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      CACHE_HOST: ${{ secrets.CACHE_HOST }}
      CACHE_PORT: ${{ secrets.CACHE_PORT }}
      CACHE_PASSWORD: ${{ secrets.CACHE_PASSWORD }}
      CACHE_TTL_SECONDS: ${{ secrets.CACHE_TTL_SECONDS }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.8'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Install dependencies with Poetry
        run: |
          cd backend
          poetry install --no-root --with dev

      - name: Start API server in background
        run: |
          cd backend
          nohup poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 > server.log 2>&1 &
          sleep 5

      - name: Run tests
        run: |
          cd backend
          poetry run pytest -q --maxfail=1

      - name: Dump server logs on failure
        if: failure()
        run: cat backend/server.log
